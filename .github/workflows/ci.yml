name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-ubuntu:
    name: Build and Test (Ubuntu)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ clang-format clang-tidy
    
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ matrix.build_type }}
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DVECTORVAULT_ENABLE_AVX2=ON \
          -DVECTORVAULT_WERROR=OFF \
          -DVECTORVAULT_BUILD_TESTS=ON \
          -DVECTORVAULT_BUILD_BENCH=ON
    
    - name: Build
      run: cmake --build build -j$(nproc)
    
    - name: Run Tests
      working-directory: build
      run: ctest --output-on-failure --timeout 300
    
    - name: Run clang-tidy (Release only)
      if: matrix.build_type == 'Release'
      run: |
        find include src api -name '*.cpp' -o -name '*.hpp' | \
          xargs clang-tidy -p build || true
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: vectorvault-ubuntu-${{ matrix.build_type }}
        path: |
          build/vectorvault_api
          build/vectorvault_bench

  build-windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Configure CMake
      run: |
        cmake -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DVECTORVAULT_ENABLE_AVX2=ON `
          -DVECTORVAULT_WERROR=OFF `
          -DVECTORVAULT_BUILD_TESTS=ON `
          -DVECTORVAULT_BUILD_BENCH=ON
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} -j
    
    - name: Run Tests
      working-directory: build
      run: ctest -C ${{ matrix.build_type }} --output-on-failure --timeout 300
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: vectorvault-windows-${{ matrix.build_type }}
        path: |
          build/${{ matrix.build_type }}/vectorvault_api.exe
          build/${{ matrix.build_type }}/vectorvault_bench.exe

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y clang-format
    
    - name: Check formatting
      run: |
        find include src api bench tests -name '*.cpp' -o -name '*.hpp' | \
          xargs clang-format --dry-run --Werror

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++
    
    - name: Configure with ASan/UBSan
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer" \
          -DVECTORVAULT_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build -j$(nproc)
    
    - name: Run Tests with Sanitizers
      working-directory: build
      run: ctest --output-on-failure --timeout 300
      env:
        ASAN_OPTIONS: detect_leaks=1
        UBSAN_OPTIONS: print_stacktrace=1
